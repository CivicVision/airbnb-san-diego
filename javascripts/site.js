/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(2);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (typeof input === 'string') {\n      this.url = input\n    } else {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split('\\r\\n').forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	eval("__webpack_require__(3);\n__webpack_require__(4);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvamF2YXNjcmlwdHMvYWxsLmpzP2U3Y2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9haXJibmIuY29mZmVlJyk7XG5yZXF1aXJlKCcuL3NlYXJjaC5jb2ZmZWUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc291cmNlL2phdmFzY3JpcHRzL2FsbC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	eval("window.airBnb = {\n  'RE': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    }\n  },\n  'RS': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    }\n  },\n  'RX': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    },\n    '6': {\n      allowed: false,\n      permit: ''\n    }\n  },\n  'RT': {\n    '1': {\n      allowed: false,\n      permit: ''\n    },\n    '3': {\n      allowed: false,\n      permit: ''\n    },\n    '6': {\n      allowed: false,\n      permit: ''\n    }\n  },\n  'RM-1': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    }\n  },\n  'RM-2': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    }\n  },\n  'RM-3': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    }\n  },\n  'RM-4': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    }\n  },\n  'RM-5': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit Required'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit Required'\n    }\n  },\n  'Commercial': {\n    '1': {\n      allowed: true,\n      permit: ''\n    },\n    '3': {\n      allowed: true,\n      permit: ''\n    },\n    '6': {\n      allowed: true,\n      permit: ''\n    }\n  },\n  'AR': {\n    '1': {\n      allowed: true,\n      permit: 'Use is permitted with limitations'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit'\n    }\n  },\n  'OR': {\n    '1': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit'\n    },\n    '3': {\n      allowed: true,\n      permit: 'Neighborhood Use Permit'\n    },\n    '6': {\n      allowed: true,\n      permit: 'Conditional Use Permit'\n    }\n  },\n  'default': {\n    '1': {\n      allowed: false,\n      permit: ''\n    },\n    '3': {\n      allowed: false,\n      permit: ''\n    },\n    '6': {\n      allowed: false,\n      permit: ''\n    }\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvamF2YXNjcmlwdHMvYWlyYm5iLmNvZmZlZT9iZDQ3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFQLEdBQWdCO0VBQ2QsTUFBTTtJQUNKLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLGtDQUZMO0tBREQ7SUFLSixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxrQ0FGTDtLQUxEO0lBU0osS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsaUNBRkw7S0FURDtHQURRO0VBZWQsTUFBTTtJQUNKLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLGtDQUZMO0tBREQ7SUFLSixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxpQ0FGTDtLQUxEO0lBU0osS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsaUNBRkw7S0FURDtHQWZRO0VBNkJkLE1BQU07SUFDSixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxrQ0FGTDtLQUREO0lBS0osS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsaUNBRkw7S0FMRDtJQVNKLEtBQUs7TUFDSCxTQUFTLEtBRE47TUFFSCxRQUFRLEVBRkw7S0FURDtHQTdCUTtFQTJDZCxNQUFNO0lBQ0osS0FBSztNQUNILFNBQVMsS0FETjtNQUVILFFBQVEsRUFGTDtLQUREO0lBS0osS0FBSztNQUNILFNBQVMsS0FETjtNQUVILFFBQVEsRUFGTDtLQUxEO0lBU0osS0FBSztNQUNILFNBQVMsS0FETjtNQUVILFFBQVEsRUFGTDtLQVREO0dBM0NRO0VBeURkLFFBQVE7SUFDTixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxrQ0FGTDtLQURDO0lBS04sS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsa0NBRkw7S0FMQztJQVNOLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLGlDQUZMO0tBVEM7R0F6RE07RUF1RWQsUUFBUTtJQUNOLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLGtDQUZMO0tBREM7SUFLTixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxrQ0FGTDtLQUxDO0lBU04sS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsaUNBRkw7S0FUQztHQXZFTTtFQXFGZCxRQUFRO0lBQ04sS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsa0NBRkw7S0FEQztJQUtOLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLGtDQUZMO0tBTEM7SUFTTixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxpQ0FGTDtLQVRDO0dBckZNO0VBbUdkLFFBQVE7SUFDTixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxrQ0FGTDtLQURDO0lBS04sS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsa0NBRkw7S0FMQztJQVNOLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLGlDQUZMO0tBVEM7R0FuR007RUFpSGQsUUFBUTtJQUNOLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLGtDQUZMO0tBREM7SUFLTixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxrQ0FGTDtLQUxDO0lBU04sS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsaUNBRkw7S0FUQztHQWpITTtFQStIZCxjQUFjO0lBQ1osS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsRUFGTDtLQURPO0lBS1osS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsRUFGTDtLQUxPO0lBU1osS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsRUFGTDtLQVRPO0dBL0hBO0VBNklkLE1BQU07SUFDSixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSxtQ0FGTDtLQUREO0lBS0osS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEseUJBRkw7S0FMRDtJQVNKLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLHdCQUZMO0tBVEQ7R0E3SVE7RUEySmQsTUFBTTtJQUNKLEtBQUs7TUFDSCxTQUFTLElBRE47TUFFSCxRQUFRLHlCQUZMO0tBREQ7SUFLSixLQUFLO01BQ0gsU0FBUyxJQUROO01BRUgsUUFBUSx5QkFGTDtLQUxEO0lBU0osS0FBSztNQUNILFNBQVMsSUFETjtNQUVILFFBQVEsd0JBRkw7S0FURDtHQTNKUTtFQXlLZCxXQUFXO0lBQ1QsS0FBSztNQUNILFNBQVMsS0FETjtNQUVILFFBQVEsRUFGTDtLQURJO0lBS1QsS0FBSztNQUNILFNBQVMsS0FETjtNQUVILFFBQVEsRUFGTDtLQUxJO0lBU1QsS0FBSztNQUNILFNBQVMsS0FETjtNQUVILFFBQVEsRUFGTDtLQVRJO0dBektHIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cuYWlyQm5iID0ge1xuICAnUkUnOiB7XG4gICAgJzEnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdOZWlnaGJvcmhvb2QgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gICAgJzMnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdOZWlnaGJvcmhvb2QgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gICAgJzYnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdDb25kaXRpb25hbCBVc2UgUGVybWl0IFJlcXVpcmVkJ1xuICAgIH1cbiAgfVxuICAnUlMnOiB7XG4gICAgJzEnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdOZWlnaGJvcmhvb2QgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gICAgJzMnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdDb25kaXRpb25hbCBVc2UgUGVybWl0IFJlcXVpcmVkJ1xuICAgIH1cbiAgICAnNic6IHtcbiAgICAgIGFsbG93ZWQ6IHRydWVcbiAgICAgIHBlcm1pdDogJ0NvbmRpdGlvbmFsIFVzZSBQZXJtaXQgUmVxdWlyZWQnXG4gICAgfVxuICB9XG4gICdSWCc6IHtcbiAgICAnMSc6IHtcbiAgICAgIGFsbG93ZWQ6IHRydWVcbiAgICAgIHBlcm1pdDogJ05laWdoYm9yaG9vZCBVc2UgUGVybWl0IFJlcXVpcmVkJ1xuICAgIH1cbiAgICAnMyc6IHtcbiAgICAgIGFsbG93ZWQ6IHRydWVcbiAgICAgIHBlcm1pdDogJ0NvbmRpdGlvbmFsIFVzZSBQZXJtaXQgUmVxdWlyZWQnXG4gICAgfVxuICAgICc2Jzoge1xuICAgICAgYWxsb3dlZDogZmFsc2VcbiAgICAgIHBlcm1pdDogJydcbiAgICB9XG4gIH1cbiAgJ1JUJzoge1xuICAgICcxJzoge1xuICAgICAgYWxsb3dlZDogZmFsc2VcbiAgICAgIHBlcm1pdDogJydcbiAgICB9XG4gICAgJzMnOiB7XG4gICAgICBhbGxvd2VkOiBmYWxzZVxuICAgICAgcGVybWl0OiAnJ1xuICAgIH1cbiAgICAnNic6IHtcbiAgICAgIGFsbG93ZWQ6IGZhbHNlXG4gICAgICBwZXJtaXQ6ICcnXG4gICAgfVxuICB9XG4gICdSTS0xJzoge1xuICAgICcxJzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnTmVpZ2hib3Job29kIFVzZSBQZXJtaXQgUmVxdWlyZWQnXG4gICAgfVxuICAgICczJzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnTmVpZ2hib3Job29kIFVzZSBQZXJtaXQgUmVxdWlyZWQnXG4gICAgfVxuICAgICc2Jzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnQ29uZGl0aW9uYWwgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gIH1cbiAgJ1JNLTInOiB7XG4gICAgJzEnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdOZWlnaGJvcmhvb2QgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gICAgJzMnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdOZWlnaGJvcmhvb2QgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gICAgJzYnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdDb25kaXRpb25hbCBVc2UgUGVybWl0IFJlcXVpcmVkJ1xuICAgIH1cbiAgfVxuICAnUk0tMyc6IHtcbiAgICAnMSc6IHtcbiAgICAgIGFsbG93ZWQ6IHRydWVcbiAgICAgIHBlcm1pdDogJ05laWdoYm9yaG9vZCBVc2UgUGVybWl0IFJlcXVpcmVkJ1xuICAgIH1cbiAgICAnMyc6IHtcbiAgICAgIGFsbG93ZWQ6IHRydWVcbiAgICAgIHBlcm1pdDogJ05laWdoYm9yaG9vZCBVc2UgUGVybWl0IFJlcXVpcmVkJ1xuICAgIH1cbiAgICAnNic6IHtcbiAgICAgIGFsbG93ZWQ6IHRydWVcbiAgICAgIHBlcm1pdDogJ0NvbmRpdGlvbmFsIFVzZSBQZXJtaXQgUmVxdWlyZWQnXG4gICAgfVxuICB9XG4gICdSTS00Jzoge1xuICAgICcxJzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnTmVpZ2hib3Job29kIFVzZSBQZXJtaXQgUmVxdWlyZWQnXG4gICAgfVxuICAgICczJzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnTmVpZ2hib3Job29kIFVzZSBQZXJtaXQgUmVxdWlyZWQnXG4gICAgfVxuICAgICc2Jzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnQ29uZGl0aW9uYWwgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gIH1cbiAgJ1JNLTUnOiB7XG4gICAgJzEnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdOZWlnaGJvcmhvb2QgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gICAgJzMnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdOZWlnaGJvcmhvb2QgVXNlIFBlcm1pdCBSZXF1aXJlZCdcbiAgICB9XG4gICAgJzYnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdDb25kaXRpb25hbCBVc2UgUGVybWl0IFJlcXVpcmVkJ1xuICAgIH1cbiAgfVxuICAnQ29tbWVyY2lhbCc6IHtcbiAgICAnMSc6IHtcbiAgICAgIGFsbG93ZWQ6IHRydWVcbiAgICAgIHBlcm1pdDogJydcbiAgICB9XG4gICAgJzMnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICcnXG4gICAgfVxuICAgICc2Jzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnJ1xuICAgIH1cbiAgfVxuICAnQVInOiB7XG4gICAgJzEnOiB7XG4gICAgICBhbGxvd2VkOiB0cnVlXG4gICAgICBwZXJtaXQ6ICdVc2UgaXMgcGVybWl0dGVkIHdpdGggbGltaXRhdGlvbnMnXG4gICAgfVxuICAgICczJzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnTmVpZ2hib3Job29kIFVzZSBQZXJtaXQnXG4gICAgfVxuICAgICc2Jzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnQ29uZGl0aW9uYWwgVXNlIFBlcm1pdCdcbiAgICB9XG4gIH1cbiAgJ09SJzoge1xuICAgICcxJzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnTmVpZ2hib3Job29kIFVzZSBQZXJtaXQnXG4gICAgfVxuICAgICczJzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnTmVpZ2hib3Job29kIFVzZSBQZXJtaXQnXG4gICAgfVxuICAgICc2Jzoge1xuICAgICAgYWxsb3dlZDogdHJ1ZVxuICAgICAgcGVybWl0OiAnQ29uZGl0aW9uYWwgVXNlIFBlcm1pdCdcbiAgICB9XG4gIH1cbiAgJ2RlZmF1bHQnOiB7XG4gICAgJzEnOiB7XG4gICAgICBhbGxvd2VkOiBmYWxzZVxuICAgICAgcGVybWl0OiAnJ1xuICAgIH1cbiAgICAnMyc6IHtcbiAgICAgIGFsbG93ZWQ6IGZhbHNlXG4gICAgICBwZXJtaXQ6ICcnXG4gICAgfVxuICAgICc2Jzoge1xuICAgICAgYWxsb3dlZDogZmFsc2VcbiAgICAgIHBlcm1pdDogJydcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NvdXJjZS9qYXZhc2NyaXB0cy9haXJibmIuY29mZmVlIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var findLatLng, findZoning;\n\nwindow.isAirBnBAllowed = function(airBnB, homes) {\n  document.getElementById(\"airbnb-allowed-\" + homes).innerHTML = airBnB.allowed ? 'Allowed' : 'Not Allowed';\n  document.getElementById(\"airbnb-allowed-\" + homes).classList.toggle('allow', airBnB.allowed);\n  document.getElementById(\"airbnb-allowed-\" + homes).classList.toggle('permit', !airBnB.allowed);\n  return document.getElementById(\"airbnb-permit-type-\" + homes).innerHTML = airBnB.permit;\n};\n\nwindow.showHumanReadableZone = function(zoneCode) {\n  var zone;\n  if (zoneCode.match(/RE|RS|RX|RT|RM/)) {\n    zone = {\n      type: \"Residential\"\n    };\n    if (zoneCode.match(/RE/)) {\n      zone.sub = \"Estate\";\n      zone.airBnb = airBnb['RE'];\n    }\n    if (zoneCode.match(/RS/)) {\n      zone.sub = \"Single Unit\";\n      zone.airBnb = airBnb['RS'];\n    }\n    if (zoneCode.match(/RX/)) {\n      zone.sub = \"Small Lot\";\n      zone.airBnb = airBnb['RX'];\n    }\n    if (zoneCode.match(/RT/)) {\n      zone.sub = \"Townhouse\";\n      zone.airBnb = airBnb['RT'];\n    }\n    if (zoneCode.match(/RM/)) {\n      zone.sub = \"Mulitple Unit\";\n      if (zoneCode.match(/RM-1/)) {\n        zone.airBnb = airBnb['RM-1'];\n      }\n      if (zoneCode.match(/RM-2/)) {\n        zone.airBnb = airBnb['RM-2'];\n      }\n      if (zoneCode.match(/RM-3/)) {\n        zone.airBnb = airBnb['RM-3'];\n      }\n      if (zoneCode.match(/RM-4/)) {\n        zone.airBnb = airBnb['RM-4'];\n      }\n      if (zoneCode.match(/RM-5/)) {\n        zone.airBnb = airBnb['RM-5'];\n      }\n    }\n    return zone;\n  }\n  if (zoneCode.match(/CN|CR|CO|CV|CP/)) {\n    zone = {\n      type: \"Commercial\"\n    };\n    zone.airBnb = airBnb['Commercial'];\n    return zone;\n  }\n  if (zoneCode.match(/IP|IL|IH|IS|IBT/)) {\n    zone = {\n      type: \"Industrial\"\n    };\n    zone.airBnb = airBnb['default'];\n    return zone;\n  }\n  if (zoneCode.match(/OP|OC|OR|OF/)) {\n    zone = {\n      type: \"Open Space\"\n    };\n    zone.airBnb = airBnb['default'];\n    if (zoneCode.match(/OR/)) {\n      zone.airBnb = airBnb['OR'];\n    }\n    return zone;\n  }\n  if (zoneCode.match(/AG|AR/)) {\n    zone = {\n      type: \"Agricultural\"\n    };\n    zone.airBnb = airBnb['default'];\n    if (zoneCode.match(/AR/)) {\n      zone.airBnb = airBnb['AR'];\n    }\n    return zone;\n  }\n  return zoneCode;\n};\n\nfindLatLng = function(address) {\n  return fetch(\"https://api.geocod.io/v1.6/geocode?q=\" + address + \"&&api_key=\" + (\"0070696704a77e777640ee7777766b746990797\")).then(function(response) {\n    return response.json();\n  }).then(function(data) {\n    return data.results[0].location;\n  });\n};\n\nfindZoning = function(lat, long) {\n  var query, sql;\n  query = \"SELECT * FROM city_zoning_sd WHERE ST_CONTAINS(the_geom,ST_SetSRID(ST_MakePoint({{long}},{{lat}}),4326))\";\n  sql = new cartodb.SQL({\n    user: 'milafrerichs'\n  });\n  return sql.execute(query, {\n    lat: lat,\n    long: long\n  }).done(function(data) {\n    var home, i, len, ref, zoneCode, zoneHuman;\n    if (data.rows.length > 0) {\n      zoneCode = data.rows[0].zone_name;\n      zoneHuman = showHumanReadableZone(zoneCode);\n      document.getElementById('zone').innerHTML = zoneHuman.type;\n      ref = ['1', '3', '6'];\n      for (i = 0, len = ref.length; i < len; i++) {\n        home = ref[i];\n        isAirBnBAllowed(zoneHuman.airBnb[home], home);\n      }\n    }\n    return document.getElementById('find-zone').innerHTML = 'Find my zone';\n  }).error(function(errors) {\n    document.getElementById('find-zone').innerHTML = 'Find my zone';\n    return alert('Somethign went wrong. Please try again.');\n  });\n};\n\nwindow.onload = function() {\n  return document.getElementById('find-zone').addEventListener(\"click\", function(event) {\n    var address;\n    this.innerHTML = 'Searching ...';\n    event.preventDefault();\n    address = document.getElementById('address').value;\n    if (!address.match(/San Diego/)) {\n      address += \", San Diego\";\n    }\n    return findLatLng(address).then(function(coordinates) {\n      return findZoning(coordinates.lat, coordinates.lng);\n    });\n  }, false);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })
/******/ ]);